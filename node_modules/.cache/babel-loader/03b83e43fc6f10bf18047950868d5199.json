{"ast":null,"code":"var _jsxFileName = \"/Users/SEHWAN/Desktop/pre-project-docu/seb39_pre_033/src/pages/PostPage/PostPage.jsx\",\n    _s = $RefreshSig$();\n\nimport styled from \"styled-components\";\nimport ReactMarkdown from \"react-markdown\";\nimport gfm from 'remark-gfm';\nimport { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n    padding: 30px 20px;\n    \n`;\n_c = Container;\nconst QuestionTitleInput = styled.input`\n    background:none;\n    border: 1px solid #777;\n    border-radius: 3px;\n    display:block;\n    width:100%;\n    box-sizing: border-box;\n    padding: 10px;\n    margin-bottom: 20px;\n    color: black;\n`;\n_c2 = QuestionTitleInput;\nconst QuestionBodyTextarea = styled.textarea`\n    background:none;\n    border: 1px solid #777;\n    border-radius: 3px;\n    display:block;\n    width:100%;\n    box-sizing: border-box;\n    padding: 10px;\n    min-height: 200px;\n    color: black;\n    font-family: inherit;\n`;\n_c3 = QuestionBodyTextarea;\nconst AskTitle = styled.h1`\n  font-size: 1.8rem;\n  margin-bottom: 60px;\n`;\n_c4 = AskTitle;\nconst BlueButtonAsk = styled.button`\nbackground-color:#0a95ff;\ncolor:  white;\nborder: 0;\nborder-radius: 5px;\npadding: 10px;\ntext-decoration: none;\n\n`;\n_c5 = BlueButtonAsk;\nconst PreviewArea = styled.div`\n    padding: 20px;\n    background-color: #ddd;\n    border-radius: 5px;\n    margin-top: 20px;\n    margin-bottom: 20px;\n    \n`;\n_c6 = PreviewArea;\n\nconst PostPage = () => {\n  _s();\n\n  const que = Number(useParams());\n  const [questions, setQuestions] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:3001/questions').then(res => {\n      return res.json();\n    }).then(data => {\n      setQuestions(data);\n    });\n  }, []);\n\n  const onSubmithandler = e => {\n    e.preventDefault();\n    const title = e.target.title.value;\n    const content = e.target.content.value;\n    fetch(`http://localhost:3001/questions/que`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        title,\n        content\n      })\n    });\n  };\n\n  const [questionTitle, setQuestionTilte] = useState('');\n  const [questionBody, setQuestionBody] = useState('');\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(AskTitle, {\n        children: \"Ask a public question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }, this), questions === null || questions === void 0 ? void 0 : questions.map(question => /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: onSubmithandler,\n        children: [/*#__PURE__*/_jsxDEV(QuestionTitleInput, {\n          name: \"title\",\n          type: \"text\",\n          value: question.title,\n          onChange: e => setQuestionTilte(e.target.value),\n          placeholder: \"e.g. is there an R function for finding the index of an element in a vector?\"\n        }, question.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(QuestionBodyTextarea, {\n          name: \"content\",\n          onChange: e => setQuestionBody(e.target.value),\n          placeholder: \"More info about your question. You can use markdown here\",\n          value: question.content\n        }, question.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(PreviewArea, {\n          children: /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n            plugins: [gfm],\n            children: question.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(BlueButtonAsk, {\n          type: 'submit',\n          children: \"Revise your question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 12\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(PostPage, \"humgqkX3NJ1Z/f43jRrp/1bHCAc=\", false, function () {\n  return [useParams];\n});\n\n_c7 = PostPage;\nexport default PostPage;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"QuestionTitleInput\");\n$RefreshReg$(_c3, \"QuestionBodyTextarea\");\n$RefreshReg$(_c4, \"AskTitle\");\n$RefreshReg$(_c5, \"BlueButtonAsk\");\n$RefreshReg$(_c6, \"PreviewArea\");\n$RefreshReg$(_c7, \"PostPage\");","map":{"version":3,"names":["styled","ReactMarkdown","gfm","useState","useParams","Container","div","QuestionTitleInput","input","QuestionBodyTextarea","textarea","AskTitle","h1","BlueButtonAsk","button","PreviewArea","PostPage","que","Number","questions","setQuestions","useEffect","fetch","then","res","json","data","onSubmithandler","e","preventDefault","title","target","value","content","method","headers","body","JSON","stringify","questionTitle","setQuestionTilte","questionBody","setQuestionBody","map","question","id"],"sources":["/Users/SEHWAN/Desktop/pre-project-docu/seb39_pre_033/src/pages/PostPage/PostPage.jsx"],"sourcesContent":["import styled from \"styled-components\"\nimport ReactMarkdown from \"react-markdown\";\nimport gfm from 'remark-gfm'\nimport { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nconst Container = styled.div`\n    padding: 30px 20px;\n    \n`;\n\nconst QuestionTitleInput = styled.input`\n    background:none;\n    border: 1px solid #777;\n    border-radius: 3px;\n    display:block;\n    width:100%;\n    box-sizing: border-box;\n    padding: 10px;\n    margin-bottom: 20px;\n    color: black;\n`;\n\n\nconst QuestionBodyTextarea = styled.textarea`\n    background:none;\n    border: 1px solid #777;\n    border-radius: 3px;\n    display:block;\n    width:100%;\n    box-sizing: border-box;\n    padding: 10px;\n    min-height: 200px;\n    color: black;\n    font-family: inherit;\n`;\n\nconst AskTitle = styled.h1`\n  font-size: 1.8rem;\n  margin-bottom: 60px;\n`;\n\nconst BlueButtonAsk = styled.button`\nbackground-color:#0a95ff;\ncolor:  white;\nborder: 0;\nborder-radius: 5px;\npadding: 10px;\ntext-decoration: none;\n\n`;\n\nconst PreviewArea = styled.div`\n    padding: 20px;\n    background-color: #ddd;\n    border-radius: 5px;\n    margin-top: 20px;\n    margin-bottom: 20px;\n    \n`;\n\n\n\n\nconst PostPage = () => {\n    \n    const que  = Number(useParams());\n    \n    const [questions, setQuestions] = useState([]);\n  \n  useEffect(() => {\n    fetch('http://localhost:3001/questions')\n    .then(res => {\n      return res.json();\n    })\n    .then(data => {\n      setQuestions(data);\n    });\n}, []);\n    \n    \n    const onSubmithandler = (e) => {\n        e.preventDefault();\n        const title = e.target.title.value;\n        const content = e.target.content.value;\n        fetch(`http://localhost:3001/questions/que`, {\n            method: 'PUT',\n            headers:{\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n            title,\n            content,\n        }),\n    });\n    };\n    const [questionTitle,setQuestionTilte] = useState('');\n    const [questionBody, setQuestionBody] = useState('');\n    \n    \n    \n    return ( \n        <>\n        \n        <Container>\n            <AskTitle>Ask a public question</AskTitle>\n            {questions?.map((question) => (\n           <form onSubmit={onSubmithandler}>\n           <QuestionTitleInput  key={question.id}\n                                name=\"title\"\n                                type=\"text\" \n                                value={question.title} \n                                onChange={e => setQuestionTilte(e.target.value)}\n                                placeholder=\"e.g. is there an R function for finding the index of an element in a vector?\"\n             /> \n            <QuestionBodyTextarea   key={question.id}\n                                    name=\"content\"\n                                    onChange={e=> setQuestionBody(e.target.value)}\n                                    placeholder=\"More info about your question. You can use markdown here\" value={question.content}/>\n            \n            <PreviewArea>\n            <ReactMarkdown plugins={[gfm]} children={question.content} />\n            </PreviewArea>\n            <BlueButtonAsk type={'submit'}>Revise your question</BlueButtonAsk>\n           </form>\n           ))}\n        </Container> \n        \n        </>\n    )};\n    \n\n\nexport default PostPage\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}